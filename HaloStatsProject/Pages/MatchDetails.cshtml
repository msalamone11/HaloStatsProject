@page
@model MatchDetailsModel
@using HaloEzAPI.Model.Response.Stats.Halo5.Arena;
@using HaloEzAPI.Model.Response.MetaData;
@{
    ViewData["Title"] = "Match Details";

    double killsPerDeath(ArenaPlayerStat player)
    {
        return Math.Round((double)player.TotalKills / (double)player.TotalDeaths, 2);
    }

    var sortedPlayersByDamage = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => totalDamage(player));
    var sortedPlayersByKills = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => player.TotalKills);

    double totalDamage(ArenaPlayerStat player)
    {

        return Math.Round(player.TotalGrenadeDamage + player.TotalMeleeDamage + player.TotalPowerWeaponDamage + player.TotalWeaponDamage);
    }

    int totalWeaponKills(ArenaPlayerStat player)
    {
        return player.TotalKills - (player.TotalGrenadeKills + player.TotalGroundPoundKills + player.TotalAssassinations +
               player.TotalPowerWeaponKills + player.TotalMeleeKills + player.TotalShoulderBashKills);
    }

    int winningTeamId = 0; //TODO Why will int not let me just let me not assign this a value. Doesn't work unless I do so I just set it to 0.
    foreach (var player in sortedPlayersByKills) //Get the winningTeamId. How can we get this without a foreach loop?
    {
        if (player.Rank == 1)
        {
            winningTeamId = player.TeamId;
            break;
        }
    }
}

<div>
    <form method="post">
        <div class="form-group" style="float:left;">
            <input name="GamerTag" type="text" id="txtGamerTag" placeholder="Gamertag" class="form-control" value="">
        </div>
        <input type="submit">
    </form>
    <br />

</div>

<div class="text-center">
    <h1 class="display-4">Match Details</h1>
</div>

<br />

<div>
    <h2>Basic</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Kills">K.</th>
            <th title="Deaths">D.</th>
            <th title="Assists">A.</th>
            <th title="Total Damage">Dmg.</th>
            <th title="Headshots">H.S.</th>
            <th title="Shots Fired">S.F.</th>
            <th title="Shots Landed">S.L.</th>
            <th title="Accuracy">Acc.</th>
            <th title="Power Weapon Grabs">PWG</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                //TODO How could we display the players Current CSR?
                //TODO How can we align the table rows to the left so that the tables line up on the page better?`
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@totalDamage(player)</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                </tr>
            }
        }

        @foreach (var player in sortedPlayersByKills) //Losing Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@totalDamage(player)</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                </tr>
            }
        }
    </table>
    <br />
</div>

<div>
    <h2>Damage</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Damage">Total</th>
            <th title="Damage Per Death">Dmg/D</th>
            <th title="Damage Per Minute">Dmg/M</th>
            <th title="Ground Pound">G.P.</th>
            <th title="Grenade">Gr.</th>
            <th title="Melee">Mel.</th>
            <th title="Power Weapon">P.W.</th>
            <th title="Spartan Charge">S.C.</th>
            <th title="Weapon">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Winning Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>
            }
        }

        @foreach (var player in sortedPlayersByDamage) //Losing Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>
            }
        }

    </table>
    <br />
</div>

<div>
    <h2>Kills</h2><br />
</div>

<div>
    <table width="100%">

        <tr>

            <th>Gamer Tag</th>
            <th title="Total Kills">Total</th>
            <th title="Kills Per Death">K/D</th>
            <th title="Kills Per Minute">K/M</th>
            <th title="Assassinations">As.</th>
            <th title="Grenade Kills">Gr.</th>
            <th title="Ground Pounds">G.P.</th>
            <th title="Power Weapon Kills">P.W.</th>
            <th title="Melees">Mel.</th>
            <th title="Spartan Charges">S.C.</th>
            <th title="Weapon Kills">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@killsPerDeath(player)</td>
                    <td>@Math.Round((double)player.TotalKills / (double)player.TotalTimePlayed.TotalMinutes, 2)</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>
            }
        }

        @foreach (var player in sortedPlayersByKills) //Losing Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@killsPerDeath(player)</td>
                    <td>@Math.Round((double)player.TotalKills / (double)player.TotalTimePlayed.TotalMinutes, 2)</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>
            }
        }
    </table>
    <br />
</div>

<div>
    <h2>Objective</h2><br />
</div>

<div>
    <table width="100%">

        @{
            //TODO need an 'if statement' here that will show a different table based on the GametypeVariant.
        }

        <tr>

            <th>Gamer Tag</th>
            <th title="Captured">Total</th>
            <th title="Defended">K/D</th>
            <th title="Secured">K/M</th>
            <th title="Total Control">As.</th>
            <th title="Assist">Gr.</th>
            <th title="Spree">G.P.</th>
            <th title="Lockdown">P.W.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Objective Stats
        {
            //TODO Instead of using sortedPlayersByKills, we are going to need sortedPlayersBySumOfStrongholds. (sumOfStrongholds = Captured + Defended + Secured)

            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@Model.PlayerStats.TeamStats.FirstOrDefault().RoundStats</td>
                </tr>
            }
        }

        @foreach (var player in sortedPlayersByKills) //Losing Team Objective Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                </tr>
            }
        }
    </table>
    <br />
</div>

@{
    /* TODO Need to add in an Objectives table for if the game is a Strongholds or CTF gametype.
     * TODO How do we get the Objective stats? I believe you are supposed to use 'TeamStats' in MatchResult.
     *        https://developer.haloapi.com/docs/services/58acdf27e2f7f71ad0dad84b/operations/Halo-5-Match-Result-Arena?
     * TODO Use https://developer.haloapi.com/docs/services/58acdf27e2f7f71ad0dad84b/operations/Halo-5-Match-Result-Arena?
     *        to get the players CSR using a combination of 'Tier' as well as 'PercentToNextTier'.
     *        Players above 1500 will just be able to use the 'CSR' property.
     * 
     */
}