@page
@model MatchDetailsModel
@using HaloEzAPI.Model.Response.Stats.Halo5.Arena;
@using HaloEzAPI.Model.Response.MetaData.Halo5;

@{
    // ViewData["Title"] = "Match Details";

    string gameTypeName = Model.GameTypeName.Name;
    Map mapName = Model.Maps.Where(map => Model.PlayerStats.MapId == map.Id).First();

    ViewData["Title"] = mapName.Name + " " + Model.GameTypeName.Name;

    int currentCSR(ArenaPlayerStat player)
    {
        int currentCSR = 0;

        if (player.CurrentCsr == null)
        {
            currentCSR = 0;
        }
        else if (player.CurrentCsr.Tier == 1 && player.CurrentCsr.Csr != 0) //Onyx to Champ
        {
            currentCSR = player.CurrentCsr.Csr;
        }
        else if (player.CurrentCsr.DesignationId == 5) //Diamond
        {
            currentCSR = 1150 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 4) //Platinum
        {
            currentCSR = 850 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 3) //Gold
        {
            currentCSR = 550 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 2) //Silver
        {
            currentCSR = 250 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 1) //Bronze
        {
            currentCSR = ((player.CurrentCsr.Tier * 50) - 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else
        {
            currentCSR = 0;
        }
        return currentCSR;
    }

    double killsPerDeath(ArenaPlayerStat player)
    {
        return Math.Round((double)player.TotalKills / (double)player.TotalDeaths, 2);
    }

    string losingTeamName(int winningTeamId)
    {
        if (winningTeamId == 0)
        {
            return "Red";
        }
        else if (winningTeamId == 1)
        {
            return "Blue";
        }
        else
        {
            return "None";
        }
    }

    int previousCSR(ArenaPlayerStat player)
    {
        int previousCSR = 0;

        if (player.PreviousCsr == null)
        {
            previousCSR = 0;
        }
        else if (player.PreviousCsr.Tier == 1 && player.PreviousCsr.Csr != 0)
        {
            previousCSR = player.PreviousCsr.Csr;
        }
        else if (player.PreviousCsr.DesignationId == 5)
        {
            previousCSR = 1150 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 4)
        {
            previousCSR = 850 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 3)
        {
            previousCSR = 550 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 2)
        {
            previousCSR = 250 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 1)
        {
            previousCSR = ((player.PreviousCsr.Tier * 50) - 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else
        {
            previousCSR = 0;
        }
        return previousCSR;
    }

    var sortedPlayersByDamage = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => totalDamage(player));
    var sortedPlayersByKills = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => player.TotalKills);

    double totalDamage(ArenaPlayerStat player)
    {

        return Math.Round(player.TotalGrenadeDamage + player.TotalMeleeDamage + player.TotalPowerWeaponDamage + player.TotalWeaponDamage);
    }

    int totalWeaponKills(ArenaPlayerStat player)
    {
        return player.TotalKills - (player.TotalGrenadeKills + player.TotalGroundPoundKills + player.TotalAssassinations +
               player.TotalPowerWeaponKills + player.TotalMeleeKills + player.TotalShoulderBashKills);
    }

    int winningTeamTotalKills = 0;
    int winningTeamTotalDeaths = 0;
    int winningTeamTotalAssists = 0;
    double winningTeamTotalDamage = 0;
    int winningTeamTotalHeadshots = 0;
    int winningTeamTotalShotsFired = 0;
    int winningTeamTotalShotsLanded = 0;
    decimal winningTeamAccuracy = 0;
    int winningTeamTotalPowerWeaponGrabs = 0;
    int winningTeamTotalPreviousCsr = 0;
    int winningTeamTotalCurrentCsr = 0;
    int winningTeamTotalCsrDifferencePostMatch = 0;
    int winningTeamTotalPlayers = 0;

    int losingTeamTotalKills = 0;
    int losingTeamTotalDeaths = 0;
    int losingTeamTotalAssists = 0;
    double losingTeamTotalDamage = 0;
    int losingTeamTotalHeadshots = 0;
    int losingTeamTotalShotsFired = 0;
    int losingTeamTotalShotsLanded = 0;
    decimal losingTeamAccuracy = 0;
    int losingTeamTotalPowerWeaponGrabs = 0;
    int losingTeamTotalPreviousCsr = 0;
    int losingTeamTotalCurrentCsr = 0;
    int losingTeamTotalCsrDifferencePostMatch = 0;
    int losingTeamTotalPlayers = 0;

    double winningTeamDamagePerDeath = 0;
    double winningTeamTotalTimePlayed = 0;
    double winningTeamDamagePerMinute = 0;
    double winningTeamTotalGroundPoundDamage = 0;
    double winningTeamTotalGrenadeDamage = 0;
    double winningTeamTotalMeleeDamage = 0;
    double winningTeamTotalPowerWeaponDamage = 0;
    double winningTeamTotalShoulderBashDamage = 0;
    double winningTeamTotalWeaponDamage = 0;

    double losingTeamDamagePerDeath = 0;
    double losingTeamTotalTimePlayed = 0;
    double losingTeamDamagePerMinute = 0;
    double losingTeamTotalGroundPoundDamage = 0;
    double losingTeamTotalGrenadeDamage = 0;
    double losingTeamTotalMeleeDamage = 0;
    double losingTeamTotalPowerWeaponDamage = 0;
    double losingTeamTotalShoulderBashDamage = 0;
    double losingTeamTotalWeaponDamage = 0;

    decimal winningTeamKillsPerDeath = 0;
    double winningTeamKillsPerMinute = 0;
    double winningTeamTotalAssassinations = 0;
    double winningTeamTotalGrenadeKills = 0;
    double winningTeamTotalGroundPoundKills = 0;
    double winningTeamTotalPowerWeaponKills = 0;
    double winningTeamTotalMeleeKills = 0;
    double winningTeamTotalShoulderBashKills = 0;
    double winningTeamTotalWeaponKills = 0;

    decimal losingTeamKillsPerDeath = 0;
    double losingTeamKillsPerMinute = 0;
    double losingTeamTotalAssassinations = 0;
    double losingTeamTotalGrenadeKills = 0;
    double losingTeamTotalGroundPoundKills = 0;
    double losingTeamTotalPowerWeaponKills = 0;
    double losingTeamTotalMeleeKills = 0;
    double losingTeamTotalShoulderBashKills = 0;
    double losingTeamTotalWeaponKills = 0;

    int winningTeamId = 0;

    foreach (var player in sortedPlayersByKills) //Get the winningTeamId. How can we get this without a foreach loop?
    {
        if (player.Rank == 1)
        {
            winningTeamId = player.TeamId;
            break;
        }
    }

    string winningTeamName(int winningTeamId)
    {
        @if (winningTeamId == 0)
        {
            return "Blue";
        }
        else if (winningTeamId == 1)
        {
            return "Red";
        }
        else
        {
            return "None";
        }
    }
}

<div>
    <form method="post">
        <div class="form-group" style="float:left;">
            <input name="GamerTag" type="text" id="txtGamerTag" placeholder="Gamertag" class="form-control" value="">
        </div>
        <input type="submit">
    </form>
    <br />

</div>

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>

<br />

<div>
    <h2>Basic</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Kills">K.</th>
            <th title="Deaths">D.</th>
            <th title="Assists">A.</th>
            <th title="KDA = (Kills +(Assists / 3) / Deaths">KDA</th>
            <th title="Shots Fired">S.F.</th>
            <th title="Shots Landed">S.L.</th>
            <th title="Accuracy">Acc.</th>
            <th title="Power Weapon Grabs">PWG</th>
            <th title="Headshots">H.S.</th>
            <th title="Previous Team Average CSR">P.CSR</th>
            <th title="Current Team Average CSR">C.CSR</th>
            <th title="CSR Difference Postmatch">Diff.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                //TODO How can we align the table rows to the left so that the tables line up on the page better?`

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@previousCSR(player)</td>
                    <td>@currentCSR(player)</td>
                    <td>@(currentCSR(player) - previousCSR(player))</td>
                </tr>

                winningTeamTotalKills += player.TotalKills;
                winningTeamTotalDeaths += player.TotalDeaths;
                winningTeamTotalAssists += player.TotalAssists;
                winningTeamTotalDamage += totalDamage(player);
                winningTeamTotalHeadshots += player.TotalHeadshots;
                winningTeamTotalShotsFired += player.TotalShotsFired;
                winningTeamTotalShotsLanded += player.TotalShotsLanded;
                winningTeamTotalPowerWeaponGrabs += player.TotalPowerWeaponGrabs;
                winningTeamTotalPreviousCsr += previousCSR(player);
                winningTeamTotalCurrentCsr += currentCSR(player);
                winningTeamTotalCsrDifferencePostMatch += (currentCSR(player) - previousCSR(player));
                winningTeamTotalPlayers += 1;

            }
        }

        @{
            winningTeamAccuracy = (decimal)winningTeamTotalShotsLanded / winningTeamTotalShotsFired;
            decimal winningTeamKDA = ((winningTeamTotalKills + (winningTeamTotalAssists / 3)) / (decimal)winningTeamTotalDeaths);
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@winningTeamTotalKills</td>
            <td>@winningTeamTotalDeaths</td>
            <td>@winningTeamTotalAssists</td>
            <td>@winningTeamKDA.ToString("F2")</td>
            <td>@winningTeamTotalShotsFired</td>
            <td>@winningTeamTotalShotsLanded</td>
            <td>@winningTeamAccuracy.ToString("F2")%</td>
            <td>@winningTeamTotalPowerWeaponGrabs</td>
            <td>@winningTeamTotalHeadshots</td>
            <td title="Team Previous CSR Average">@(winningTeamTotalPreviousCsr / winningTeamTotalPlayers)</td>
            <td title="Team Postmatch CSR Average">@(winningTeamTotalCurrentCsr / winningTeamTotalPlayers)</td>
            <td>@winningTeamTotalCsrDifferencePostMatch</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalKills += player.TotalKills;
                losingTeamTotalDeaths += player.TotalDeaths;
                losingTeamTotalAssists += player.TotalAssists;
                losingTeamTotalDamage += totalDamage(player);
                losingTeamTotalShotsFired += player.TotalShotsFired;
                losingTeamTotalShotsLanded += player.TotalShotsLanded;
                losingTeamTotalPowerWeaponGrabs += player.TotalPowerWeaponGrabs;
                losingTeamTotalHeadshots += player.TotalHeadshots;
                losingTeamTotalPreviousCsr += previousCSR(player);
                losingTeamTotalCurrentCsr += currentCSR(player);
                losingTeamTotalCsrDifferencePostMatch += (currentCSR(player) - previousCSR(player));
                losingTeamTotalPlayers += 1;
            }
        }

        @{
            losingTeamAccuracy = (decimal)losingTeamTotalShotsLanded / losingTeamTotalShotsFired;
            decimal losingTeamKDA = ((losingTeamTotalKills + (losingTeamTotalAssists / 3)) / (decimal)losingTeamTotalDeaths);
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@losingTeamTotalKills</td>
            <td>@losingTeamTotalDeaths</td>
            <td>@losingTeamTotalAssists</td>
            <td>@losingTeamKDA.ToString("F2")</td>
            <td>@losingTeamTotalShotsFired</td>
            <td>@losingTeamTotalShotsLanded</td>
            <td>@losingTeamAccuracy.ToString("F2")%</td>
            <td>@losingTeamTotalPowerWeaponGrabs</td>
            <td>@losingTeamTotalHeadshots</td>
            <td title="Team Previous CSR Average">@(losingTeamTotalPreviousCsr / losingTeamTotalPlayers)</td>
            <td title="Team Postmatch CSR Average">@(losingTeamTotalCurrentCsr / losingTeamTotalPlayers)</td>
            <td>@losingTeamTotalCsrDifferencePostMatch</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@previousCSR(player)</td>
                    <td>@currentCSR(player)</td>
                    <td>@(currentCSR(player) - previousCSR(player))</td>
                </tr>
            }
        }

    </table>
    <br />
</div>

<div>
    <h2>Damage</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Damage">Total</th>
            <th title="Damage Per Death">Dmg/D</th>
            <th title="Damage Per Minute">Dmg/M</th>
            <th title="Ground Pound">G.P.</th>
            <th title="Grenade">Gr.</th>
            <th title="Melee">Mel.</th>
            <th title="Power Weapon">P.W.</th>
            <th title="Spartan Charge">S.C.</th>
            <th title="Weapon">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Winning Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>

                winningTeamTotalTimePlayed += player.TotalTimePlayed.TotalMinutes;
                winningTeamTotalGroundPoundDamage += player.TotalGroundPoundDamage;
                winningTeamTotalGrenadeDamage += player.TotalGrenadeDamage;
                winningTeamTotalMeleeDamage += player.TotalMeleeDamage;
                winningTeamTotalPowerWeaponDamage += player.TotalPowerWeaponDamage;
                winningTeamTotalShoulderBashDamage += player.TotalShoulderBashDamage;
                winningTeamTotalWeaponDamage += player.TotalWeaponDamage;
            }
        }

        @{
            winningTeamDamagePerDeath = winningTeamTotalDamage / winningTeamTotalDeaths;
            winningTeamDamagePerMinute = winningTeamTotalDamage / winningTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@Math.Round(winningTeamTotalDamage)</td>
            <td>@Math.Round(winningTeamDamagePerDeath)</td>
            <td>@Math.Round(winningTeamDamagePerMinute)</td>
            <td>@Math.Round(winningTeamTotalGroundPoundDamage)</td>
            <td>@Math.Round(winningTeamTotalGrenadeDamage)</td>
            <td>@Math.Round(winningTeamTotalMeleeDamage)</td>
            <td>@Math.Round(winningTeamTotalPowerWeaponDamage)</td>
            <td>@Math.Round(winningTeamTotalShoulderBashDamage)</td>
            <td>@Math.Round(winningTeamTotalWeaponDamage)</td>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Losing Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalTimePlayed += player.TotalTimePlayed.TotalMinutes;
                losingTeamTotalGroundPoundDamage += player.TotalGroundPoundDamage;
                losingTeamTotalGrenadeDamage += player.TotalGrenadeDamage;
                losingTeamTotalMeleeDamage += player.TotalMeleeDamage;
                losingTeamTotalPowerWeaponDamage += player.TotalPowerWeaponDamage;
                losingTeamTotalShoulderBashDamage += player.TotalShoulderBashDamage;
                losingTeamTotalWeaponDamage += player.TotalWeaponDamage;
            }
        }

        @{
            losingTeamDamagePerDeath = losingTeamTotalDamage / losingTeamTotalDeaths;
            losingTeamDamagePerMinute = losingTeamTotalDamage / losingTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@Math.Round(losingTeamTotalDamage)</td>
            <td>@Math.Round(losingTeamDamagePerDeath)</td>
            <td>@Math.Round(losingTeamDamagePerMinute)</td>
            <td>@Math.Round(losingTeamTotalGroundPoundDamage)</td>
            <td>@Math.Round(losingTeamTotalGrenadeDamage)</td>
            <td>@Math.Round(losingTeamTotalMeleeDamage)</td>
            <td>@Math.Round(losingTeamTotalPowerWeaponDamage)</td>
            <td>@Math.Round(losingTeamTotalShoulderBashDamage)</td>
            <td>@Math.Round(losingTeamTotalWeaponDamage)</td>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Losing Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>
            }
        }

    </table>
    <br />
</div>

<div>
    <h2>Kills</h2><br />
</div>

<div>
    <table width="100%">

        <tr>
            <th>Gamer Tag</th>
            <th title="Kills">K.</th>
            <th title="Deaths">D.</th>
            <th title="Assists">A.</th>
            <th title="KDA = (Kills +(Assists / 3) / Deaths">KDA</th>
            <th title="Kills Per Death">K/D</th>
            <th title="Kills Per Minute">K/M</th>
            <th title="Assassinations">As.</th>
            <th title="Grenade Kills">Gr.</th>
            <th title="Ground Pounds">G.P.</th>
            <th title="Melees">Mel.</th>
            <th title="Power Weapon Kills">P.W.</th>
            <th title="Spartan Charges">S.C.</th>
            <th title="Weapon Kills">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@killsPerDeath(player).ToString("F2")</td>
                    <td>@((player.TotalKills / player.TotalTimePlayed.TotalMinutes).ToString("F2"))</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>

                winningTeamTotalAssassinations += player.TotalAssassinations;
                winningTeamTotalGrenadeKills += player.TotalGrenadeKills;
                winningTeamTotalGroundPoundKills += player.TotalGroundPoundKills;
                winningTeamTotalPowerWeaponKills += player.TotalPowerWeaponKills;
                winningTeamTotalMeleeKills += player.TotalMeleeKills;
                winningTeamTotalShoulderBashKills += player.TotalShoulderBashKills;
                winningTeamTotalWeaponKills += totalWeaponKills(player);
            }
        }

        @{
            winningTeamKillsPerDeath = (decimal)winningTeamTotalKills / winningTeamTotalDeaths;
            winningTeamKillsPerMinute = winningTeamTotalKills / winningTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@winningTeamTotalKills</td>
            <td>@winningTeamTotalDeaths</td>
            <td>@winningTeamTotalAssists</td>
            <td>@winningTeamKDA.ToString("F2")</td>
            <td>@winningTeamKillsPerDeath.ToString("F2")</td>
            <td>@winningTeamKillsPerMinute.ToString("F2")</td>
            <td>@winningTeamTotalAssassinations</td>
            <td>@winningTeamTotalGrenadeKills</td>
            <td>@winningTeamTotalGroundPoundKills</td>
            <td>@winningTeamTotalMeleeKills</td>
            <td>@winningTeamTotalPowerWeaponKills</td>
            <td>@winningTeamTotalShoulderBashKills</td>
            <td>@winningTeamTotalWeaponKills</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalAssassinations += player.TotalAssassinations;
                losingTeamTotalGrenadeKills += player.TotalGrenadeKills;
                losingTeamTotalGroundPoundKills += player.TotalGroundPoundKills;
                losingTeamTotalPowerWeaponKills += player.TotalPowerWeaponKills;
                losingTeamTotalMeleeKills += player.TotalMeleeKills;
                losingTeamTotalShoulderBashKills += player.TotalShoulderBashKills;
                losingTeamTotalWeaponKills += totalWeaponKills(player);

            }
        }

        @{
            losingTeamKillsPerDeath = (decimal)losingTeamTotalKills / losingTeamTotalDeaths;
            losingTeamKillsPerMinute = losingTeamTotalKills / losingTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@losingTeamTotalKills</td>
            <td>@losingTeamTotalDeaths</td>
            <td>@losingTeamTotalAssists</td>
            <td>@losingTeamKDA.ToString("F2")</td>
            <td>@losingTeamKillsPerDeath.ToString("F2")</td>
            <td>@losingTeamKillsPerMinute.ToString("F2")</td>
            <td>@losingTeamTotalAssassinations</td>
            <td>@losingTeamTotalGrenadeKills</td>
            <td>@losingTeamTotalGroundPoundKills</td>
            <td>@losingTeamTotalMeleeKills</td>
            <td>@losingTeamTotalPowerWeaponKills</td>
            <td>@losingTeamTotalShoulderBashKills</td>
            <td>@losingTeamTotalWeaponKills</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Kills Stats
        {

            decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@killsPerDeath(player).ToString("F2")</td>
                    <td>@((player.TotalKills / player.TotalTimePlayed.TotalMinutes).ToString("F2"))</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>
            }
        }
    </table>
    <br />
</div>

@switch (gameTypeName)
{
    case "CTF HCS":
        @:
        <div>
            <h2>Objective: @gameTypeName</h2><br />
        </div>
        <div>
            <table width="100%">
                <tr>
                    <th>Gamer Tag</th>
                    <th title="Total">Total</th>
                    <th title="Flags Assisted">F. Assisted</th>
                    <th title="Flags Captured">F. Captured</th>
                    <th title="Flag Carrier Kills">F. Car. Kills</th>
                    <th title="Flag Carriers Protected">F. Car. Protected</th>
                    <th title="Flags Defended">F. Defense</th>
                    <th title="Flag Kills">F. Kills</th>
                    <th title="Flag Pulls">F. Pulls</th>
                    <th title="Flag Returns">F. Returns</th>
                </tr>

                @{
                    int flagsCaptured(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 2944278681).FirstOrDefault()?.Count ?? 0; }
                    int flagsDefended(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 164204247).FirstOrDefault()?.Count ?? 0; }
                    int flagsAssisted(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 1494478183).FirstOrDefault()?.Count ?? 0; }
                    int flagCarrierKills(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 2299858338).FirstOrDefault()?.Count ?? 0; }
                    int flagCarriersProtected(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 1957561936).FirstOrDefault()?.Count ?? 0; }
                    int flagKills(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 3514632335).FirstOrDefault()?.Count ?? 0; }
                    int flagPulls(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 1039658009).FirstOrDefault()?.Count ?? 0; }
                    int flagReturns(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 1063951891).FirstOrDefault()?.Count ?? 0; }

                    int winningTeamFlagsCaptured = 0;
                    int winningTeamFlagsAssisted = 0;
                    int winningTeamFlagCarrierKills = 0;
                    int winningTeamFlagCarriersProtected = 0;
                    int winningTeamFlagsDefended = 0;
                    int winningTeamFlagKills = 0;
                    int winningTeamFlagPulls = 0;
                    int winningTeamFlagReturns = 0;

                    int losingTeamFlagsCaptured = 0;
                    int losingTeamFlagsAssisted = 0;
                    int losingTeamFlagCarrierKills = 0;
                    int losingTeamFlagCarriersProtected = 0;
                    int losingTeamFlagsDefended = 0;
                    int losingTeamFlagKills = 0;
                    int losingTeamFlagPulls = 0;
                    int losingTeamFlagReturns = 0;

                    var sortedPlayersByFlagObjective = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => (flagsCaptured(player) + flagsDefended(player) + flagsAssisted(player) + flagCarrierKills(player) +
                                                                                                                                                            flagCarriersProtected(player) + flagKills(player) + flagPulls(player) + flagReturns(player)));

                }

                @foreach (var player in sortedPlayersByFlagObjective) //Winning Team CTF Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>
                                @(flagsCaptured(player) + flagsDefended(player) + flagsAssisted(player) + flagCarrierKills(player) +
                                                                                    flagCarriersProtected(player) + flagKills(player) + flagPulls(player) + flagReturns(player))
                            </td>
                            <td>@flagsAssisted(player)</td>
                            <td>@flagsCaptured(player)</td>
                            <td>@flagCarrierKills(player)</td>
                            <td>@flagCarriersProtected(player)</td>
                            <td>@flagsDefended(player)</td>
                            <td>@flagKills(player)</td>
                            <td>@flagPulls(player)</td>
                            <td>@flagReturns(player)</td>
                        </tr>

                        winningTeamFlagsCaptured += flagsCaptured(player);
                        winningTeamFlagsAssisted += flagsAssisted(player);
                        winningTeamFlagCarrierKills += flagCarrierKills(player);
                        winningTeamFlagCarriersProtected += flagCarriersProtected(player);
                        winningTeamFlagsDefended += flagsDefended(player);
                        winningTeamFlagKills += flagKills(player);
                        winningTeamFlagPulls += flagPulls(player);
                        winningTeamFlagReturns += flagReturns(player);
                    }
                }

                @{
                    int winningTeamTotalFlagObjectiveStats = winningTeamFlagsCaptured + winningTeamFlagsAssisted + winningTeamFlagCarrierKills +
                                                             winningTeamFlagCarriersProtected + winningTeamFlagsDefended + winningTeamFlagKills +
                                                             winningTeamFlagPulls + winningTeamFlagReturns;
                }

                <tr>
                    <td align="center">@winningTeamName(winningTeamId)</td>
                    <td>@winningTeamTotalFlagObjectiveStats</td>
                    <td>@winningTeamFlagsCaptured</td>
                    <td>@winningTeamFlagsAssisted</td>
                    <td>@winningTeamFlagCarrierKills</td>
                    <td>@winningTeamFlagCarriersProtected</td>
                    <td>@winningTeamFlagsDefended</td>
                    <td>@winningTeamFlagKills</td>
                    <td>@winningTeamFlagPulls</td>
                    <td>@winningTeamFlagReturns</td>
                </tr>

                @foreach (var player in sortedPlayersByFlagObjective) //Losing Team CTF Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        losingTeamFlagsCaptured += flagsCaptured(player);
                        losingTeamFlagsAssisted += flagsAssisted(player);
                        losingTeamFlagCarrierKills += flagCarrierKills(player);
                        losingTeamFlagCarriersProtected += flagCarriersProtected(player);
                        losingTeamFlagsDefended += flagsDefended(player);
                        losingTeamFlagKills += flagKills(player);
                        losingTeamFlagPulls += flagPulls(player);
                        losingTeamFlagReturns += flagReturns(player);
                    }
                }

                @{
                    int losingTeamTotalFlagObjectiveStats = losingTeamFlagsCaptured + losingTeamFlagsAssisted + losingTeamFlagCarrierKills +
                                                             losingTeamFlagCarriersProtected + losingTeamFlagsDefended + losingTeamFlagKills +
                                                             losingTeamFlagPulls + losingTeamFlagReturns;
                }

                <tr>
                    <td align="center">@losingTeamName(winningTeamId)</td>
                    <td>@losingTeamTotalFlagObjectiveStats</td>
                    <td>@losingTeamFlagsCaptured</td>
                    <td>@losingTeamFlagsAssisted</td>
                    <td>@losingTeamFlagCarrierKills</td>
                    <td>@losingTeamFlagCarriersProtected</td>
                    <td>@losingTeamFlagsDefended</td>
                    <td>@losingTeamFlagKills</td>
                    <td>@losingTeamFlagPulls</td>
                    <td>@losingTeamFlagReturns</td>
                </tr>

                @foreach (var player in sortedPlayersByFlagObjective) //Losing Team CTF Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>
                                @(flagsCaptured(player) + flagsDefended(player) + flagsAssisted(player) + flagCarrierKills(player) +
                                                                                flagCarriersProtected(player) + flagKills(player) + flagPulls(player) + flagReturns(player))
                            </td>

                            <td>@flagsAssisted(player)</td>
                            <td>@flagsCaptured(player)</td>
                            <td>@flagCarrierKills(player)</td>
                            <td>@flagCarriersProtected(player)</td>
                            <td>@flagsDefended(player)</td>
                            <td>@flagKills(player)</td>
                            <td>@flagPulls(player)</td>
                            <td>@flagReturns(player)</td>

                        </tr>
                    }
                }
            </table>
            <br />
        </div>
        break;

    case "Strongholds HCS":
        @:
        <div>
            <h2>Objective: @gameTypeName</h2><br />
        </div>
        <div>
            <table width="100%">
                <tr>
                    <th>Gamer Tag</th>
                    <th title="Strongholds Captured + Defended + Secured">Total</th>
                    <th title="Strongholds Captured">Caps</th>
                    <th title="Strongholds Defended">Defense</th>
                    <th title="Strongholds Secured">Secures</th>
                    <th title="Stronghold Captures Assisted">C. Assists</th>
                    <th title="Stronghold Capture Sprees">C. Sprees</th>
                    <th title="Stronghold Lockdowns">Lockdowns</th>
                    <th title="Stronghold Total Controls">T. Controls</th>
                </tr>

                @{
                    int strongholdCaptures(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 3565443938).FirstOrDefault()?.Count ?? 0; }
                    int strongholdDefense(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 1351381581).FirstOrDefault()?.Count ?? 0; }
                    int strongholdSecures(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 2916014239).FirstOrDefault()?.Count ?? 0; }
                    int strongholdAssists(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 1637841390).FirstOrDefault()?.Count ?? 0; }
                    int strongholdCaptureSprees(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 3354395650).FirstOrDefault()?.Count ?? 0; }
                    int strongholdLockdowns(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 2896365521).FirstOrDefault()?.Count ?? 0; }
                    int strongholdTotalControls(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 2105198095).FirstOrDefault()?.Count ?? 0; }

                    int winningTeamStrongholdCaptures = 0;
                    int winningTeamStrongholdDefense = 0;
                    int winningTeamStrongholdSecures = 0;
                    int winningTeamStrongholdAssists = 0;
                    int winningTeamStrongholdCaptureSprees = 0;
                    int winningTeamStrongholdLockdowns = 0;
                    int winningTeamStrongholdTotalControls = 0;

                    int losingTeamStrongholdCaptures = 0;
                    int losingTeamStrongholdDefense = 0;
                    int losingTeamStrongholdSecures = 0;
                    int losingTeamStrongholdAssists = 0;
                    int losingTeamStrongholdCaptureSprees = 0;
                    int losingTeamStrongholdLockdowns = 0;
                    int losingTeamStrongholdTotalControls = 0;

                    var sortedPlayersByStrongholdObjective = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => (strongholdCaptures(player) +
                                                                                                                                                                  strongholdDefense(player) +
                                                                                                                                                                  strongholdSecures(player)));


                }

                @foreach (var player in sortedPlayersByStrongholdObjective) //Winning Team Strongholds Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>
                                @(strongholdCaptures(player) + strongholdDefense(player) + strongholdSecures(player))
                            </td>
                            <td>@strongholdCaptures(player)</td>
                            <td>@strongholdDefense(player)</td>
                            <td>@strongholdSecures(player)</td>
                            <td>@strongholdAssists(player)</td>
                            <td>@strongholdCaptureSprees(player)</td>
                            <td>@strongholdLockdowns(player)</td>
                            <td>@strongholdTotalControls(player)</td>
                        </tr>

                        winningTeamStrongholdCaptures += strongholdCaptures(player);
                        winningTeamStrongholdDefense += strongholdDefense(player);
                        winningTeamStrongholdSecures += strongholdSecures(player);
                        winningTeamStrongholdAssists += strongholdAssists(player);
                        winningTeamStrongholdCaptureSprees += strongholdCaptureSprees(player);
                        winningTeamStrongholdLockdowns += strongholdLockdowns(player);
                        winningTeamStrongholdTotalControls += strongholdTotalControls(player);
                    }
                }

                @{
                    int winningTeamTotalStrongholdObjectiveStats = winningTeamStrongholdCaptures + winningTeamStrongholdDefense + winningTeamStrongholdSecures;
                }

                <tr>
                    <td align="center">@winningTeamName(winningTeamId)</td>
                    <td>@winningTeamTotalStrongholdObjectiveStats</td>
                    <td>@winningTeamStrongholdCaptures</td>
                    <td>@winningTeamStrongholdDefense</td>
                    <td>@winningTeamStrongholdSecures</td>
                    <td>@winningTeamStrongholdAssists</td>
                    <td>@winningTeamStrongholdCaptureSprees</td>
                    <td>@winningTeamStrongholdLockdowns</td>
                    <td>@winningTeamStrongholdTotalControls</td>
                </tr>

                @foreach (var player in sortedPlayersByStrongholdObjective) //Losing Team Strongholds Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        losingTeamStrongholdCaptures += strongholdCaptures(player);
                        losingTeamStrongholdDefense += strongholdDefense(player);
                        losingTeamStrongholdSecures += strongholdSecures(player);
                        losingTeamStrongholdAssists += strongholdAssists(player);
                        losingTeamStrongholdCaptureSprees += strongholdCaptureSprees(player);
                        losingTeamStrongholdLockdowns += strongholdLockdowns(player);
                        losingTeamStrongholdTotalControls += strongholdTotalControls(player);
                    }
                }

                @{
                    int losingTeamTotalStrongholdObjectiveStats = losingTeamStrongholdCaptures + losingTeamStrongholdDefense + losingTeamStrongholdSecures;
                }

                <tr>
                    <td align="center">@losingTeamName(winningTeamId)</td>
                    <td>@losingTeamTotalStrongholdObjectiveStats</td>
                    <td>@losingTeamStrongholdCaptures</td>
                    <td>@losingTeamStrongholdDefense</td>
                    <td>@losingTeamStrongholdSecures</td>
                    <td>@losingTeamStrongholdAssists</td>
                    <td>@losingTeamStrongholdCaptureSprees</td>
                    <td>@losingTeamStrongholdLockdowns</td>
                    <td>@losingTeamStrongholdTotalControls</td>
                </tr>

                @foreach (var player in sortedPlayersByStrongholdObjective) //Losing Team Stronghold Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>
                                @(strongholdCaptures(player) + strongholdDefense(player) + strongholdSecures(player))
                            </td>
                            <td>@strongholdCaptures(player)</td>
                            <td>@strongholdDefense(player)</td>
                            <td>@strongholdSecures(player)</td>
                            <td>@strongholdAssists(player)</td>
                            <td>@strongholdCaptureSprees(player)</td>
                            <td>@strongholdLockdowns(player)</td>
                            <td>@strongholdTotalControls(player)</td>
                        </tr>
                    }
                }
            </table>
            <br />
        </div>
        break;

    case "Oddball HCS":
        @:
        <div>
            <h2>Objective: @gameTypeName</h2><br />
        </div>
        <div>
            <table width="100%">
                <tr>
                    <th>Gamer Tag</th>
                    <th title="Ball Held Duration">Ball Held Duration</th>
                    <th title="Ballsassination">Ballsassination</th>
                    <th title="Carrier Kill">Carrier Kill</th>
                    <th title="Carrier Protected">Carrier Protected</th>
                    <th title="First Touch">First Touch</th>
                    <th title="Oddball Kill">Oddball Kill</th>
                </tr>

                @{
                    int BallHeldDuration(ArenaPlayerStat player) { return player.Impulses.Where(Impulse => Impulse.Id == 2483589021).FirstOrDefault()?.Count ?? 0; }
                    int Ballsassination(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 105976035).FirstOrDefault()?.Count ?? 0; }
                    int CarrierKill(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 2615178569).FirstOrDefault()?.Count ?? 0; }
                    int CarrierProtected(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 1638349322).FirstOrDefault()?.Count ?? 0; }
                    int FirstTouch(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 2971193992).FirstOrDefault()?.Count ?? 0; }
                    int OddballKill(ArenaPlayerStat player) { return player.MedalAwards.Where(MedalAward => MedalAward.MedalId == 3910677154).FirstOrDefault()?.Count ?? 0; }

                    int winningTeamBallHeldDuration = 0;
                    int winningTeamBallsassinations = 0;
                    int winningTeamCarrierKills = 0;
                    int winningTeamCarriersProtected = 0;
                    int winningTeamFirstTouches = 0;
                    int winningTeamOddballKills = 0;

                    int losingTeamBallHeldDuration = 0;
                    int losingTeamBallsassinations = 0;
                    int losingTeamCarrierKills = 0;
                    int losingTeamCarriersProtected = 0;
                    int losingTeamFirstTouches = 0;
                    int losingTeamOddballKills = 0;

                    var sortedPlayersByOddballObjective = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => (BallHeldDuration(player)));

                }

                @foreach (var player in sortedPlayersByOddballObjective) //Winning Team Oddballs Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>@BallHeldDuration(player)</td>
                            <td>@Ballsassination(player)</td>
                            <td>@CarrierKill(player)</td>
                            <td>@CarrierProtected(player)</td>
                            <td>@FirstTouch(player)</td>
                            <td>@OddballKill(player)</td>
                        </tr>

                        winningTeamBallHeldDuration += BallHeldDuration(player);
                        winningTeamBallsassinations += Ballsassination(player);
                        winningTeamCarrierKills += CarrierKill(player);
                        winningTeamCarriersProtected += CarrierProtected(player);
                        winningTeamFirstTouches += FirstTouch(player);
                        winningTeamOddballKills += OddballKill(player);
                    }
                }

                @{
                    int winningTeamTotalOddballObjectiveStats = winningTeamBallsassinations + winningTeamCarriersProtected + winningTeamCarrierKills + winningTeamFirstTouches + winningTeamOddballKills;
                }

                <tr>
                    <td align="center">@winningTeamName(winningTeamId)</td>
                    <td>@winningTeamBallHeldDuration</td>
                    <td>@winningTeamBallsassinations</td>
                    <td>@winningTeamCarrierKills</td>
                    <td>@winningTeamCarriersProtected</td>
                    <td>@winningTeamFirstTouches</td>
                    <td>@winningTeamOddballKills</td>
                </tr>

                @foreach (var player in sortedPlayersByOddballObjective) //Losing Team Oddballs Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        losingTeamBallHeldDuration += BallHeldDuration(player);
                        losingTeamBallsassinations += Ballsassination(player);
                        losingTeamCarrierKills += CarrierKill(player);
                        losingTeamCarriersProtected += CarrierProtected(player);
                        losingTeamFirstTouches += FirstTouch(player);
                        losingTeamOddballKills += OddballKill(player);
                    }
                }

                @{
                    int losingTeamTotalOddballObjectiveStats = losingTeamBallsassinations + losingTeamCarriersProtected + losingTeamCarrierKills + losingTeamFirstTouches + losingTeamOddballKills;
                }

                <tr>
                    <td align="center">@losingTeamName(winningTeamId)</td>
                    <td>@losingTeamBallHeldDuration</td>
                    <td>@losingTeamBallsassinations</td>
                    <td>@losingTeamCarrierKills</td>
                    <td>@losingTeamCarriersProtected</td>
                    <td>@losingTeamFirstTouches</td>
                    <td>@losingTeamOddballKills</td>
                </tr>

                @foreach (var player in sortedPlayersByOddballObjective) //Losing Team Oddball Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                            <td>@BallHeldDuration(player)</td>
                            <td>@Ballsassination(player)</td>
                            <td>@CarrierKill(player)</td>
                            <td>@CarrierProtected(player)</td>
                            <td>@FirstTouch(player)</td>
                            <td>@OddballKill(player)</td>
                        </tr>
                    }
                }
            </table>
            <br />
        </div>
        break;
}

