@page
@model MatchDetailsModel
@using HaloEzAPI.Model.Response.Stats.Halo5.Arena;

@{
    // ViewData["Title"] = "Match Details";

    ViewData["Title"] = Model.GameTypeName.Name;
    string gameTypeName = Model.GameTypeName.Name;

    int currentCSR(ArenaPlayerStat player)
    {
        int currentCSR = 0;

        if (player.CurrentCsr == null)
        {
            currentCSR = 0;
        }
        else if (player.CurrentCsr.Tier == 1 && player.CurrentCsr.Csr != 0) //Onyx to Champ
        {
            currentCSR = player.CurrentCsr.Csr;
        }
        else if (player.CurrentCsr.DesignationId == 5) //Diamond
        {
            currentCSR = 1150 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 4) //Platinum
        {
            currentCSR = 850 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 3) //Gold
        {
            currentCSR = 550 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 2) //Silver
        {
            currentCSR = 250 + (player.CurrentCsr.Tier * 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else if (player.CurrentCsr.DesignationId == 1) //Bronze
        {
            currentCSR = ((player.CurrentCsr.Tier * 50) - 50) + ((player.CurrentCsr.PercentToNextTier) / 2);
        }
        else
        {
            currentCSR = 0;
        }
        return currentCSR;
    }

    double killsPerDeath(ArenaPlayerStat player)
    {
        return Math.Round((double)player.TotalKills / (double)player.TotalDeaths, 2);
    }

    string losingTeamName(int winningTeamId)
    {
        if (winningTeamId == 0)
        {
            return "Red";
        }
        else if (winningTeamId == 1)
        {
            return "Blue";
        }
        else
        {
            return "None";
        }
    }

    int previousCSR(ArenaPlayerStat player)
    {
        int previousCSR = 0;

        if (player.PreviousCsr == null)
        {
            previousCSR = 0;
        }
        else if (player.PreviousCsr.DesignationId == 1 && player.PreviousCsr.Csr != 0)
        {
            previousCSR = player.PreviousCsr.Csr;
        }
        else if (player.PreviousCsr.DesignationId == 5)
        {
            previousCSR = 1150 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 4)
        {
            previousCSR = 850 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 3)
        {
            previousCSR = 550 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 2)
        {
            previousCSR = 250 + (player.PreviousCsr.Tier * 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else if (player.PreviousCsr.DesignationId == 1)
        {
            previousCSR = ((player.PreviousCsr.Tier * 50) - 50) + ((player.PreviousCsr.PercentToNextTier) / 2);
        }
        else
        {
            previousCSR = 0;
        }
        return previousCSR;
    }

    var sortedPlayersByDamage = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => totalDamage(player));
    var sortedPlayersByKills = @Model.PlayerStats.PlayerStats.OrderByDescending(player => player.Rank).OrderByDescending(player => player.TotalKills);

    double totalDamage(ArenaPlayerStat player)
    {

        return Math.Round(player.TotalGrenadeDamage + player.TotalMeleeDamage + player.TotalPowerWeaponDamage + player.TotalWeaponDamage);
    }

    int totalWeaponKills(ArenaPlayerStat player)
    {
        return player.TotalKills - (player.TotalGrenadeKills + player.TotalGroundPoundKills + player.TotalAssassinations +
               player.TotalPowerWeaponKills + player.TotalMeleeKills + player.TotalShoulderBashKills);
    }

    int winningTeamTotalKills = 0;
    int winningTeamTotalDeaths = 0;
    int winningTeamTotalAssists = 0;
    double winningTeamTotalDamage = 0;
    int winningTeamTotalHeadshots = 0;
    int winningTeamTotalShotsFired = 0;
    int winningTeamTotalShotsLanded = 0;
    decimal winningTeamAccuracy = 0;
    int winningTeamTotalPowerWeaponGrabs = 0;
    int winningTeamTotalPreviousCsr = 0;
    int winningTeamTotalCurrentCsr = 0;
    int winningTeamTotalCsrDifferencePostMatch = 0;
    int winningTeamTotalPlayers = 0;

    int losingTeamTotalKills = 0;
    int losingTeamTotalDeaths = 0;
    int losingTeamTotalAssists = 0;
    double losingTeamTotalDamage = 0;
    int losingTeamTotalHeadshots = 0;
    int losingTeamTotalShotsFired = 0;
    int losingTeamTotalShotsLanded = 0;
    decimal losingTeamAccuracy = 0;
    int losingTeamTotalPowerWeaponGrabs = 0;
    int losingTeamTotalPreviousCsr = 0;
    int losingTeamTotalCurrentCsr = 0;
    int losingTeamTotalCsrDifferencePostMatch = 0;
    int losingTeamTotalPlayers = 0;

    double winningTeamDamagePerDeath = 0;
    double winningTeamTotalTimePlayed = 0;
    double winningTeamDamagePerMinute = 0;
    double winningTeamTotalGroundPoundDamage = 0;
    double winningTeamTotalGrenadeDamage = 0;
    double winningTeamTotalMeleeDamage = 0;
    double winningTeamTotalPowerWeaponDamage = 0;
    double winningTeamTotalShoulderBashDamage = 0;
    double winningTeamTotalWeaponDamage = 0;

    double losingTeamDamagePerDeath = 0;
    double losingTeamTotalTimePlayed = 0;
    double losingTeamDamagePerMinute = 0;
    double losingTeamTotalGroundPoundDamage = 0;
    double losingTeamTotalGrenadeDamage = 0;
    double losingTeamTotalMeleeDamage = 0;
    double losingTeamTotalPowerWeaponDamage = 0;
    double losingTeamTotalShoulderBashDamage = 0;
    double losingTeamTotalWeaponDamage = 0;

    decimal winningTeamKillsPerDeath = 0;
    double winningTeamKillsPerMinute = 0;
    double winningTeamTotalAssassinations = 0;
    double winningTeamTotalGrenadeKills = 0;
    double winningTeamTotalGroundPoundKills = 0;
    double winningTeamTotalPowerWeaponKills = 0;
    double winningTeamTotalMeleeKills = 0;
    double winningTeamTotalShoulderBashKills = 0;
    double winningTeamTotalWeaponKills = 0;

    decimal losingTeamKillsPerDeath = 0;
    double losingTeamKillsPerMinute = 0;
    double losingTeamTotalAssassinations = 0;
    double losingTeamTotalGrenadeKills = 0;
    double losingTeamTotalGroundPoundKills = 0;
    double losingTeamTotalPowerWeaponKills = 0;
    double losingTeamTotalMeleeKills = 0;
    double losingTeamTotalShoulderBashKills = 0;
    double losingTeamTotalWeaponKills = 0;

    int winningTeamId = 0; //TODO Why will int not let me just let me not assign this a value. Doesn't work unless I do so I just set it to 0.

    foreach (var player in sortedPlayersByKills) //Get the winningTeamId. How can we get this without a foreach loop?
    {
        if (player.Rank == 1)
        {
            winningTeamId = player.TeamId;
            break;
        }
    }

    string winningTeamName(int winningTeamId)
    {
        @if (winningTeamId == 0)
        {
            return "Blue";
        }
        else if (winningTeamId == 1)
        {
            return "Red";
        }
        else
        {
            return "None";
        }
    }
}

<div>
    <form method="post">
        <div class="form-group" style="float:left;">
            <input name="GamerTag" type="text" id="txtGamerTag" placeholder="Gamertag" class="form-control" value="">
        </div>
        <input type="submit">
    </form>
    <br />

</div>

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>

<br />

<div>
    <h2>Basic</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Kills">K.</th>
            <th title="Deaths">D.</th>
            <th title="Assists">A.</th>
            <th title="KDA = (Kills +(Assists / 3) / Deaths">KDA</th>
            <th title="Shots Fired">S.F.</th>
            <th title="Shots Landed">S.L.</th>
            <th title="Accuracy">Acc.</th>
            <th title="Power Weapon Grabs">PWG</th>
            <th title="Headshots">H.S.</th>
            <th title="Previous Team Average CSR">P.CSR</th>
            <th title="Current Team Average CSR">C.CSR</th>
            <th title="CSR Difference Postmatch">Diff.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                //TODO How can we align the table rows to the left so that the tables line up on the page better?`

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@previousCSR(player)</td>
                    <td>@currentCSR(player)</td>
                    <td>@(currentCSR(player) - previousCSR(player))</td>
                </tr>

                winningTeamTotalKills += player.TotalKills;
                winningTeamTotalDeaths += player.TotalDeaths;
                winningTeamTotalAssists += player.TotalAssists;
                winningTeamTotalDamage += totalDamage(player);
                winningTeamTotalHeadshots += player.TotalHeadshots;
                winningTeamTotalShotsFired += player.TotalShotsFired;
                winningTeamTotalShotsLanded += player.TotalShotsLanded;
                winningTeamTotalPowerWeaponGrabs += player.TotalPowerWeaponGrabs;
                winningTeamTotalPreviousCsr += previousCSR(player);
                winningTeamTotalCurrentCsr += currentCSR(player);
                winningTeamTotalCsrDifferencePostMatch += (currentCSR(player) - previousCSR(player));
                winningTeamTotalPlayers += 1;

            }
        }

        @{
            winningTeamAccuracy = (decimal)winningTeamTotalShotsLanded / winningTeamTotalShotsFired;
            decimal winningTeamKDA = ((winningTeamTotalKills + (winningTeamTotalAssists / 3)) / (decimal)winningTeamTotalDeaths);
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@winningTeamTotalKills</td>
            <td>@winningTeamTotalDeaths</td>
            <td>@winningTeamTotalAssists</td>
            <td>@winningTeamKDA.ToString("F2")</td>
            <td>@winningTeamTotalShotsFired</td>
            <td>@winningTeamTotalShotsLanded</td>
            <td>@winningTeamAccuracy.ToString("F2")%</td>
            <td>@winningTeamTotalPowerWeaponGrabs</td>
            <td>@winningTeamTotalHeadshots</td>
            <td title="Team Previous CSR Average">@(winningTeamTotalPreviousCsr / winningTeamTotalPlayers)</td>
            <td title="Team Postmatch CSR Average">@(winningTeamTotalCurrentCsr / winningTeamTotalPlayers)</td>
            <td>@winningTeamTotalCsrDifferencePostMatch</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalKills += player.TotalKills;
                losingTeamTotalDeaths += player.TotalDeaths;
                losingTeamTotalAssists += player.TotalAssists;
                losingTeamTotalDamage += totalDamage(player);
                losingTeamTotalShotsFired += player.TotalShotsFired;
                losingTeamTotalShotsLanded += player.TotalShotsLanded;
                losingTeamTotalPowerWeaponGrabs += player.TotalPowerWeaponGrabs;
                losingTeamTotalHeadshots += player.TotalHeadshots;
                losingTeamTotalPreviousCsr += previousCSR(player);
                losingTeamTotalCurrentCsr += currentCSR(player);
                losingTeamTotalCsrDifferencePostMatch += (currentCSR(player) - previousCSR(player));
                losingTeamTotalPlayers += 1;
            }
        }

        @{
            losingTeamAccuracy = (decimal)losingTeamTotalShotsLanded / losingTeamTotalShotsFired;
            decimal losingTeamKDA = ((losingTeamTotalKills + (losingTeamTotalAssists / 3)) / (decimal)losingTeamTotalDeaths);
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@losingTeamTotalKills</td>
            <td>@losingTeamTotalDeaths</td>
            <td>@losingTeamTotalAssists</td>
            <td>@losingTeamKDA.ToString("F2")</td>
            <td>@losingTeamTotalShotsFired</td>
            <td>@losingTeamTotalShotsLanded</td>
            <td>@losingTeamAccuracy.ToString("F2")%</td>
            <td>@losingTeamTotalPowerWeaponGrabs</td>
            <td>@losingTeamTotalHeadshots</td>
            <td title="Team Previous CSR Average">@(losingTeamTotalPreviousCsr / losingTeamTotalPlayers)</td>
            <td title="Team Postmatch CSR Average">@(losingTeamTotalCurrentCsr / losingTeamTotalPlayers)</td>
            <td>@losingTeamTotalCsrDifferencePostMatch</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Basic Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@player.TotalShotsFired</td>
                    <td>@player.TotalShotsLanded</td>
                    <td>@Math.Round((decimal)player.TotalShotsLanded / (decimal)player.TotalShotsFired, 2)%</td>
                    <td>@player.TotalPowerWeaponGrabs</td>
                    <td>@player.TotalHeadshots</td>
                    <td>@previousCSR(player)</td>
                    <td>@currentCSR(player)</td>
                    <td>@(currentCSR(player) - previousCSR(player))</td>
                </tr>
            }
        }

    </table>
    <br />
</div>

<div>
    <h2>Damage</h2><br />
</div>

<div>
    <table width="100%">
        <tr>
            <th>Gamer Tag</th>
            <th title="Total Damage">Total</th>
            <th title="Damage Per Death">Dmg/D</th>
            <th title="Damage Per Minute">Dmg/M</th>
            <th title="Ground Pound">G.P.</th>
            <th title="Grenade">Gr.</th>
            <th title="Melee">Mel.</th>
            <th title="Power Weapon">P.W.</th>
            <th title="Spartan Charge">S.C.</th>
            <th title="Weapon">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Winning Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>

                winningTeamTotalTimePlayed += player.TotalTimePlayed.TotalMinutes;
                winningTeamTotalGroundPoundDamage += player.TotalGroundPoundDamage;
                winningTeamTotalGrenadeDamage += player.TotalGrenadeDamage;
                winningTeamTotalMeleeDamage += player.TotalMeleeDamage;
                winningTeamTotalPowerWeaponDamage += player.TotalPowerWeaponDamage;
                winningTeamTotalShoulderBashDamage += player.TotalShoulderBashDamage;
                winningTeamTotalWeaponDamage += player.TotalWeaponDamage;
            }
        }

        @{
            winningTeamDamagePerDeath = winningTeamTotalDamage / winningTeamTotalDeaths;
            winningTeamDamagePerMinute = winningTeamTotalDamage / winningTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@Math.Round(winningTeamTotalDamage)</td>
            <td>@Math.Round(winningTeamDamagePerDeath)</td>
            <td>@Math.Round(winningTeamDamagePerMinute)</td>
            <td>@Math.Round(winningTeamTotalGroundPoundDamage)</td>
            <td>@Math.Round(winningTeamTotalGrenadeDamage)</td>
            <td>@Math.Round(winningTeamTotalMeleeDamage)</td>
            <td>@Math.Round(winningTeamTotalPowerWeaponDamage)</td>
            <td>@Math.Round(winningTeamTotalShoulderBashDamage)</td>
            <td>@Math.Round(winningTeamTotalWeaponDamage)</td>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Losing Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalTimePlayed += player.TotalTimePlayed.TotalMinutes;
                losingTeamTotalGroundPoundDamage += player.TotalGroundPoundDamage;
                losingTeamTotalGrenadeDamage += player.TotalGrenadeDamage;
                losingTeamTotalMeleeDamage += player.TotalMeleeDamage;
                losingTeamTotalPowerWeaponDamage += player.TotalPowerWeaponDamage;
                losingTeamTotalShoulderBashDamage += player.TotalShoulderBashDamage;
                losingTeamTotalWeaponDamage += player.TotalWeaponDamage;
            }
        }

        @{
            losingTeamDamagePerDeath = losingTeamTotalDamage / losingTeamTotalDeaths;
            losingTeamDamagePerMinute = losingTeamTotalDamage / losingTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@Math.Round(losingTeamTotalDamage)</td>
            <td>@Math.Round(losingTeamDamagePerDeath)</td>
            <td>@Math.Round(losingTeamDamagePerMinute)</td>
            <td>@Math.Round(losingTeamTotalGroundPoundDamage)</td>
            <td>@Math.Round(losingTeamTotalGrenadeDamage)</td>
            <td>@Math.Round(losingTeamTotalMeleeDamage)</td>
            <td>@Math.Round(losingTeamTotalPowerWeaponDamage)</td>
            <td>@Math.Round(losingTeamTotalShoulderBashDamage)</td>
            <td>@Math.Round(losingTeamTotalWeaponDamage)</td>
        </tr>

        @foreach (var player in sortedPlayersByDamage) //Losing Team Damage Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@totalDamage(player)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalDeaths)</td>
                    <td>@Math.Round(totalDamage(player) / player.TotalTimePlayed.TotalMinutes)</td>
                    <td>@Math.Round(player.TotalGroundPoundDamage)</td>
                    <td>@Math.Round(player.TotalGrenadeDamage)</td>
                    <td>@Math.Round(player.TotalMeleeDamage)</td>
                    <td>@Math.Round(player.TotalPowerWeaponDamage)</td>
                    <td>@Math.Round(player.TotalShoulderBashDamage)</td>
                    <td>@Math.Round(player.TotalWeaponDamage)</td>
                </tr>
            }
        }

    </table>
    <br />
</div>

<div>
    <h2>Kills</h2><br />
</div>

<div>
    <table width="100%">

        <tr>
            <th>Gamer Tag</th>
            <th title="Kills">K.</th>
            <th title="Deaths">D.</th>
            <th title="Assists">A.</th>
            <th title="KDA = (Kills +(Assists / 3) / Deaths">KDA</th>
            <th title="Kills Per Death">K/D</th>
            <th title="Kills Per Minute">K/M</th>
            <th title="Assassinations">As.</th>
            <th title="Grenade Kills">Gr.</th>
            <th title="Ground Pounds">G.P.</th>
            <th title="Melees">Mel.</th>
            <th title="Power Weapon Kills">P.W.</th>
            <th title="Spartan Charges">S.C.</th>
            <th title="Weapon Kills">Wpn.</th>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Winning Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
            {

                decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@killsPerDeath(player).ToString("F2")</td>
                    <td>@((player.TotalKills / player.TotalTimePlayed.TotalMinutes).ToString("F2"))</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>

                winningTeamTotalAssassinations += player.TotalAssassinations;
                winningTeamTotalGrenadeKills += player.TotalGrenadeKills;
                winningTeamTotalGroundPoundKills += player.TotalGroundPoundKills;
                winningTeamTotalPowerWeaponKills += player.TotalPowerWeaponKills;
                winningTeamTotalMeleeKills += player.TotalMeleeKills;
                winningTeamTotalShoulderBashKills += player.TotalShoulderBashKills;
                winningTeamTotalWeaponKills += totalWeaponKills(player);
            }
        }

        @{
            winningTeamKillsPerDeath = (decimal)winningTeamTotalKills / winningTeamTotalDeaths;
            winningTeamKillsPerMinute = winningTeamTotalKills / winningTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@winningTeamName(winningTeamId)</td>
            <td>@winningTeamTotalKills</td>
            <td>@winningTeamTotalDeaths</td>
            <td>@winningTeamTotalAssists</td>
            <td>@winningTeamKDA.ToString("F2")</td>
            <td>@winningTeamKillsPerDeath.ToString("F2")</td>
            <td>@winningTeamKillsPerMinute.ToString("F2")</td>
            <td>@winningTeamTotalAssassinations</td>
            <td>@winningTeamTotalGrenadeKills</td>
            <td>@winningTeamTotalGroundPoundKills</td>
            <td>@winningTeamTotalMeleeKills</td>
            <td>@winningTeamTotalPowerWeaponKills</td>
            <td>@winningTeamTotalShoulderBashKills</td>
            <td>@winningTeamTotalWeaponKills</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Kills Stats
        {
            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                losingTeamTotalAssassinations += player.TotalAssassinations;
                losingTeamTotalGrenadeKills += player.TotalGrenadeKills;
                losingTeamTotalGroundPoundKills += player.TotalGroundPoundKills;
                losingTeamTotalPowerWeaponKills += player.TotalPowerWeaponKills;
                losingTeamTotalMeleeKills += player.TotalMeleeKills;
                losingTeamTotalShoulderBashKills += player.TotalShoulderBashKills;
                losingTeamTotalWeaponKills += totalWeaponKills(player);

            }
        }

        @{
            losingTeamKillsPerDeath = (decimal)losingTeamTotalKills / losingTeamTotalDeaths;
            losingTeamKillsPerMinute = losingTeamTotalKills / losingTeamTotalTimePlayed;
        }

        <tr>
            <td align="center">@losingTeamName(winningTeamId)</td>
            <td>@losingTeamTotalKills</td>
            <td>@losingTeamTotalDeaths</td>
            <td>@losingTeamTotalAssists</td>
            <td>@losingTeamKDA.ToString("F2")</td>
            <td>@losingTeamKillsPerDeath.ToString("F2")</td>
            <td>@losingTeamKillsPerMinute.ToString("F2")</td>
            <td>@losingTeamTotalAssassinations</td>
            <td>@losingTeamTotalGrenadeKills</td>
            <td>@losingTeamTotalGroundPoundKills</td>
            <td>@losingTeamTotalMeleeKills</td>
            <td>@losingTeamTotalPowerWeaponKills</td>
            <td>@losingTeamTotalShoulderBashKills</td>
            <td>@losingTeamTotalWeaponKills</td>
        </tr>

        @foreach (var player in sortedPlayersByKills) //Losing Team Kills Stats
        {

            decimal killsDeathsAssists = (player.TotalKills + (decimal)(player.TotalAssists / 3)) / (decimal)player.TotalDeaths;

            if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
            {
                <tr>
                    <td>@player.Player.Gamertag</td>
                    <td>@player.TotalKills</td>
                    <td>@player.TotalDeaths</td>
                    <td>@player.TotalAssists</td>
                    <td>@killsDeathsAssists.ToString("F2")</td>
                    <td>@killsPerDeath(player).ToString("F2")</td>
                    <td>@((player.TotalKills / player.TotalTimePlayed.TotalMinutes).ToString("F2"))</td>
                    <td>@player.TotalAssassinations</td>
                    <td>@player.TotalGrenadeKills</td>
                    <td>@player.TotalGroundPoundKills</td>
                    <td>@player.TotalMeleeKills</td>
                    <td>@player.TotalPowerWeaponKills</td>
                    <td>@player.TotalShoulderBashKills</td>
                    <td>@totalWeaponKills(player)</td>
                </tr>
            }
        }
    </table>
    <br />
</div>

@switch (gameTypeName)
{
    default:
    break;

    case "Slayer HCS":
    break;

    case "CTF HCS":
        @:
        <div>
            <h2>Objective: @gameTypeName</h2><br />
        </div>
        <div>
            <table width="100%">
                <tr>
                    <th>Gamer Tag</th>
                    <th title="Flags Captured">Captures</th>
                    <th title="Flags Defended">Defense</th>
                    <th title="Flags Assisted">Assists</th>
                    <th title="Flag Carrier Kills">C. Kills</th>
                    <th title="Flag Carriers Protected">C. Protected</th>
                    <th title="Flag Kills">F. Kills</th>
                    <th title="Flag Pulls">F. Pulls</th>
                    <th title="Flag Returns">F. Returns</th>
                </tr>

                @foreach (var player in sortedPlayersByKills) //Winning Team Objective Stats
                {
                    //TODO Instead of using sortedPlayersByKills, we are going to need sortedPlayersBySumOfStrongholds. (sumOfStrongholds = Captured + Defended + Secured)

                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                        </tr>
                    }
                }

                <tr>
                    <td align="center">@winningTeamName(winningTeamId)</td>
                </tr>

                <tr>
                    <td align="center">@losingTeamName(winningTeamId)</td>
                </tr>

                @foreach (var player in sortedPlayersByKills) //Losing Team Objective Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                        </tr>
                    }
                }
            </table>
            <br />
        </div>
    break;

    case "Strongholds HCS":
        @:
        <div>
            <h2>Objective: @gameTypeName</h2><br />
        </div>
        <div>
            <table width="100%">
                <tr>
                    <th>Gamer Tag</th>
                    <th title="Strongholds Captured + Defended + Secured">Total</th>
                    <th title="Strongholds Captured">Captured</th>
                    <th title="Strongholds Defended">Defended</th>
                    <th title="Strongholds Secured">Secured</th>
                    <th title="Stronghold Assisted Captures">Assisted</th>
                    <th title="Stronghold Capture Sprees">C. Sprees</th>
                    <th title="Stronghold Total Controls">T. Controls</th>
                </tr>
                @foreach (var player in sortedPlayersByKills) //Winning Team Objective Stats
                {
                    //TODO Instead of using sortedPlayersByKills, we are going to need sortedPlayersBySumOfStrongholds. (sumOfStrongholds = Captured + Defended + Secured)

                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId == winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                        </tr>
                    }
                }

                <tr>
                    <td align="center">@winningTeamName(winningTeamId)</td>
                </tr>

                <tr>
                    <td align="center">@losingTeamName(winningTeamId)</td>
                </tr>

                @foreach (var player in sortedPlayersByKills) //Losing Team Objective Stats
                {
                    if (Model.PlayerStats.TeamStats.FirstOrDefault().Rank < 5 && player.TeamId != winningTeamId)
                    {
                        <tr>
                            <td>@player.Player.Gamertag</td>
                        </tr>
                    }
                }
            </table>
            <br />
        </div>
        break;

        case "Oddball HCS":
        break;
}

@{
    /* TODO Need to add in an Objectives table for if the game is a Strongholds or CTF gametype.
     * TODO How do we get the Objective stats? I believe you are supposed to use 'TeamStats' in MatchResult.
     *        https://developer.haloapi.com/docs/services/58acdf27e2f7f71ad0dad84b/operations/Halo-5-Match-Result-Arena?
     * TODO Use https://developer.haloapi.com/docs/services/58acdf27e2f7f71ad0dad84b/operations/Halo-5-Match-Result-Arena?
     *        to get the players CSR using a combination of 'Tier' as well as 'PercentToNextTier'.
     *        Players above 1500 will just be able to use the 'CSR' property.
     *
     */
}
